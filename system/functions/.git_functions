#!/usr/bin/env bash

# Rewrites the git author history. 
# Replaces the current author with a new author information.
# To update a central git repo, execute the following:
# git push --force --tags origin 'refs/heads/*' 
function git-author-rewrite {
local old_email="$1" correct_name="$2" correct_email="$3"

if [[ -z "$old_email" || -z "$correct_name" || -z "$correct_email" ]]; then
  printf "\n";
  printf "please provide params in the following order:
    1. old email
    2. current name
    3. current email\n"
  printf "\n";
  return;
fi

export OLD_EMAIL="$old_email"
export CORRECT_NAME="$correct_name"
export CORRECT_EMAIL="$correct_email"

git filter-branch --env-filter '

if [ "$GIT_COMMITTER_EMAIL" = "$OLD_EMAIL" ]
then
    export GIT_COMMITTER_NAME="$CORRECT_NAME"
    export GIT_COMMITTER_EMAIL="$CORRECT_EMAIL"
fi
if [ "$GIT_AUTHOR_EMAIL" = "$OLD_EMAIL" ]
then
    export GIT_AUTHOR_NAME="$CORRECT_NAME"
    export GIT_AUTHOR_EMAIL="$CORRECT_EMAIL"
fi
' --tag-name-filter cat -- --branches --tags

unset OLD_EMAIL CORRECT_NAME CORRECT_EMAIL
}

# Updates the index to ignore all changes to a given file.
function git_ignore_changes() {
  git update-index --assume-unchanged "$1"
}

# Updates the index to allow changes to a given file.
# Use this command when a ignored file changes needs to 
# be committed.
function git_notice_changes()  {
  git update-index --no-assume-unchanged "$1"
}
