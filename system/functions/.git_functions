#!/usr/bin/env bash

# Rewrites the git author history. 
# Replaces the current author with a new author information.
# To update a central git repo, execute the following:
# git push --force --tags origin 'refs/heads/*' 
function git-author-rewrite {
local old_email="$1" correct_name="$2" correct_email="$3"

if [[ -z "$old_email" || -z "$correct_name" || -z "$correct_email" ]]; then
  printf "\n";
  printf "please provide params in the following order:
    1. old email
    2. current name
    3. current email\n"
  printf "\n";
  return;
fi

export OLD_EMAIL="$old_email"
export CORRECT_NAME="$correct_name"
export CORRECT_EMAIL="$correct_email"

git filter-branch --env-filter '

if [ "$GIT_COMMITTER_EMAIL" = "$OLD_EMAIL" ]
then
    export GIT_COMMITTER_NAME="$CORRECT_NAME"
    export GIT_COMMITTER_EMAIL="$CORRECT_EMAIL"
fi
if [ "$GIT_AUTHOR_EMAIL" = "$OLD_EMAIL" ]
then
    export GIT_AUTHOR_NAME="$CORRECT_NAME"
    export GIT_AUTHOR_EMAIL="$CORRECT_EMAIL"
fi
' --tag-name-filter cat -- --branches --tags

unset OLD_EMAIL CORRECT_NAME CORRECT_EMAIL
}

function git-find-large-objects() {
  # set the internal field spereator to line break, so that we can iterate easily over the verify-pack output
  IFS=$'\n';

  # list all objects including their size, sort by size, take top 10
  objects=$(git verify-pack -v .git/objects/pack/pack-*.idx | grep -v chain | sort -k3nr | head)

  echo "All sizes are in kB's. The pack column is the size of the object, compressed, inside the pack file."

  output="size,pack,SHA,location"
  allObjects=$(git rev-list --all --objects)
  for y in $objects
  do
    # extract the size in bytes
    size=$(($(echo "$y" | cut -f 5 -d ' ')/1024))
    # extract the compressed size in bytes
    compressedSize=$(($(echo "$y" | cut -f 6 -d ' ')/1024))
    # extract the SHA
    sha=$(echo "$y" | cut -f 1 -d ' ')
    # find the objects location in the repository tree
    other=$(echo "${allObjects}" | grep "$sha")
    #lineBreak=`echo -e "\n"`
    output="${output}\n${size},${compressedSize},${other}"
  done

  echo -e "$output" | column -t -s ', '
}

function git-who-owns-this-blob() {
  local obj_name="$1"
  shift
  git log "$@" --pretty=format:'%T %h %s' \
  | while read -r tree commit subject ; do
      if git ls-tree -r "$tree" | grep -q "$obj_name" ; then
        echo "$commit" "$subject"
      fi
    done
}
