#!/usr/bin/env bash

# Removes all containers
function docker-remove-containers() {
  docker container prune -f
}

# Removes all images
function docker-remove-images() {
  local images="";
  images=$(docker images -q);
  [ ! -z "$images" ] && docker rmi -f $images;
  [ -z "$images" ] && echo "No images to clean!";
}

# Remove the build cache
function docker-remove-build-cache() {
  docker builder prune
}

# Removes all docker container and images
function docker-spring-clean() {
  docker-remove-containers;
  docker-remove-images;
}

# Removes all dangling docker images
function docker-remove-dangling() {
  local danglers="";
  danglers="$(docker images -f 'dangling=true' -q)";
  [ ! -z "$danglers" ] && docker rmi --force $danglers;
  [ -z "$danglers" ] && echo "No dangling images!";
}

# Removes all volumes
function docker-remove-volumes() {
  local volumes="";
  volumes="$(docker volume ls -qf dangling=true)";
  [ ! -z "$volumes" ] && docker volume rm $volumes;
  [ -z "$volumes" ] && echo "No volumes to remove!";
}

# Lists IPv4 address of all containers within given network
function docker-list-network-container-ip() {
  local network="$1";

  if [ -z "$network" ]; then
    echo "Please provide network name";
  else
    docker network inspect -f '{{json .Containers}}' "$network" | jq '.[] | .Name + ":" + .IPv4Address' 
  fi
}

function docker-disk-usage() {
  docker system df
}
